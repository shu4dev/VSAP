theory State_Monad
imports "HOL-Library.Monad_Syntax"
begin

text \<open> The nondeterministic state monad with failure \<close>

type_synonym ('s,'a) nondet_monad = "'s \<Rightarrow> (('a \<times> 's) set \<times> bool)"

definition
  return :: "'a \<Rightarrow> ('s,'a) nondet_monad"
where
  "return x \<equiv> \<lambda>s. ({(x,s)},False)"

definition
  bind :: "('s,'a) nondet_monad \<Rightarrow> ('a \<Rightarrow> ('s,'b) nondet_monad) \<Rightarrow> ('s,'b) nondet_monad"
where
  "bind a b \<equiv> \<lambda>s. ({(r'',s''). \<exists> (r',s') \<in> fst (a s). (r'',s'') \<in> fst (b r' s')},
                     snd (a s) \<or> (\<exists>(r', s') \<in> fst (a s). snd (b r' s')))" 

(* Use standard monad syntax for our new "bind" *)
adhoc_overloading
  Monad_Syntax.bind bind 

(* Always use do-notation *)
translations
  "CONST bind_do" == "CONST Monad_Syntax.bind"  

  
lemma return_bind:
  "return x >>= f = f x"
  unfolding bind_def return_def
  by simp

lemma bind_return:
  "m >>= return = m"
  apply (rule ext)
  apply (simp add: bind_def return_def)
  apply (rule prod_eqI)
  apply auto
  done
 
lemma bind_assoc:
  "(a >>= b) >>= c = (a >>= (\<lambda>s. b s >>= c) :: ('s,'a) nondet_monad)"
  by (fastforce simp: bind_def split: prod.splits)

definition get :: "('s,'s) nondet_monad" where
  "get \<equiv> \<lambda>s. ({(s,s)},False)"

definition put :: "'s \<Rightarrow> ('s,unit) nondet_monad" where
  "put s \<equiv> \<lambda>_. ({((),s)},False)"

definition gets :: "('s \<Rightarrow> 'a) \<Rightarrow> ('s,'a) nondet_monad" where
  "gets f \<equiv> get >>= (\<lambda>s. return (f s))"

definition modify :: "('s \<Rightarrow> 's) \<Rightarrow> ('s,unit) nondet_monad" where
  "modify f \<equiv> get >>= (\<lambda>s. put (f s))"

definition fail :: "('s,'a) nondet_monad" where
  "fail \<equiv> \<lambda>_. ({}, True)"

definition assert :: "bool \<Rightarrow> ('s,unit) nondet_monad" where
  "assert P \<equiv> if P then return () else fail"

definition guard :: "('s \<Rightarrow> bool) \<Rightarrow> ('s,unit) nondet_monad" where
  "guard P \<equiv> get >>= (\<lambda>s. assert (P s))"

lemma guard_gets_def:
  "guard P = do {
    succ \<leftarrow> gets P;
    assert succ
  }"
  by (simp add: bind_assoc guard_def gets_def return_bind)
(*
  apply (unfold guard_def gets_def)
  apply (unfold bind_assoc)
  apply (unfold return_bind)
  apply (simp only: )
  done
*)

definition select :: "'a set \<Rightarrow> ('s,'a) nondet_monad" where
  "select A \<equiv> \<lambda>s. ((A \<times> {s}),False)"

definition 
  alternative :: "('s,'a) nondet_monad \<Rightarrow> ('s,'a) nondet_monad \<Rightarrow> ('s,'a) nondet_monad"
  (infixl "OR" 20)
where
  "alternative a b \<equiv> (\<lambda>s. (fst (a s) \<union> (fst (b s)),snd (a s) \<or> snd (b s)))"  

lemma alternative_alternative_def:
  "alternative a b = do {
    choice <- select {True, False};
    if choice then a else b
  }"
  apply (simp add: alternative_def bind_def select_def)
  apply auto
  done
end